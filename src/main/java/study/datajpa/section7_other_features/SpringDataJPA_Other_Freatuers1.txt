스프링 데이터 JPA 분석

 * springDataJPA 사용
 *
 * 목차
 * 1. specifications(명세)
 *
 *
 *
 * ===========================
 *
 * Specifications (명세) - 안쓴다 (criteria 자체가 너무 복잡하다)
 *
 * 책 도메인 주도 설계(Domain Driven Design)는 SPECIFICATION(명세)라는 개념을 소개
 * 스프링 데이터 JPA는 JPA Criteria를 활용해서 이 개념을 사용할 수 있도록 지원
 *
 *
 * 술어(predicate)
 *
     * 참 또는 거짓으로 평가
     * AND OR 같은 연산자로 조합해서 다양한 검색조건을 쉽게 생성(컴포지트 패턴)
     * 예) 검색 조건 하나하나
     * 스프링 데이터 JPA는 org.springframework.data.jpa.domain.Specification 클래스로 정의
 *
 *
 * ------
 * * JpaSpecificationExecutor 인터페이스 상속*
 *
 * - Specification -
 * jpaCriteria 기술을 갖고 조립할수 있ㄱ ㅔ만ㄷ들어둔 클래스
 *
 * 명세를 정의하려면 Specification 인터페이스를 구현
 * 명세를 정의할 때는 toPredicate(...) 메서드만 구현하면 되는데 JPA Criteria의 Root ,
 * CriteriaQuery , CriteriaBuilder 클래스를 파라미터 제공
 * 예제에서는 편의상 람다를 사용
 *
 * > 참고: 실무에서는 JPA Criteria를 거의 안쓴다! 대신에 QueryDSL을 사용하자.
 *
 * ==========================================

Query By Example

Probe: 필드에 데이터가 있는 실제 도메인 객체
ExampleMatcher: 특정 필드를 일치시키는 상세한 정보 제공, 재사용 가능
Example: Probe와 ExampleMatcher로 구성, 쿼리를 생성하는데 사용

---사용---

        //probe 생성
        Member member = new Member ("m1");
        Team team = new Team("teamA");
        member.changeTeam(team);

        //ExampleMatcher 생성,   age 프로퍼티는 무시
        ExampleMatcher matcher = ExampleMatcher.matching()
                .withIgnorePaths("age");

        Example<Member> example = Example.of(member,matcher);
        List<Member> result = memberRepository.findAll(example);

        Assertions.assertThat(result.get(0).getUsername()).isEqualTo("m1");

---사용---


*장점
동적 쿼리를 편리하게 처리
도메인 객체를 그대로 사용
데이터 저장소를 RDB에서 NOSQL로 변경해도 코드 변경이 없게 추상화 되어 있음
스프링 데이터 JPA JpaRepository 인터페이스에 이미 포함 - spring-data.common 에 구현되어있다

*단점
조인은 가능하지만 내부 조인(INNER JOIN)만 가능함 외부 조인(LEFT JOIN) 안됨

다음과 같은 중첩 제약조건 안됨
firstname = ?0 or (firstname = ?1 and lastname = ?2)

매칭 조건이 매우 단순함
문자는 starts/contains/ends/regex
다른 속성은 정확한 매칭( = )만 지원


*정리 - 조인의 문제가 해결되는가 아닌가로 항상 분류해보자

실무에서 사용하기에는 매칭 조건이 너무 단순하고, LEFT 조인이 안됨
실무에서는 QueryDSL을 사용하자


======================================

Projections - 쿼리 select절에 들어갈 데이터 (필드들)

https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#projections

엔티티 대신에 DTO를 편리하게 조회할 때 사용

전체 엔티티가 아니라 만약 회원 이름만 딱 조회하고 싶을때 사용
-> root 엔티티 조회용으로만 사용하는것이 적합하다

---
인터페이스만 정의하면 프록시 기술을 통해 스프링에서 구현체 를 만들어준다


/**
 * projections
 *
 * 인터페이스 기반 Closed Projections
 * 프로퍼티 형식(getter)의 인터페이스를 제공하면, 구현체는 스프링 데이터 JPA가 제공
 * public interface UsernameOnly {
 *  String getUsername();
 * }
 *
 * 인터페이스 기반 Open Proejctions
 * 다음과 같이 스프링의 SpEL 문법도 지원
 * @Value("#{target.username + ' ' + target.age }")
 * 단! 이렇게 SpEL문법을 사용하면, DB에서 엔티티 필드를 다 조회해온 다음에 계산한다! 따라서 JPQL
 * SELECT 절 최적화가 안된다.
 * */
public interface UsernameOnly {

    @Value("#{target.username + ' ' + target.age }")
    String getUsername();
}

-----------
클래스 기반 Projection - 구체적인 클래스를 지정했기때문에 프록시 기술이 없어도 된다

다음과 같이 인터페이스가 아닌 구체적인 DTO 형식도 가능
생성자의 파라미터 이름으로 매칭 - 파라미터 명이 달라지면 된다

public class UsernameOnlyDto {

    private final String username;

    //생성자 파라미터 명으로 프로젝션이 구동된다
    public UsernameOnlyDto(String username) {
        this.username = username;
    }

    public String getUsername() {
        return username;
    }
}
-----

    //동적 projection - memberRepository
    <T> List<T> findProjectionClassTypeByUsername(@Param("username") String username,Class<T> type);

--------------중첩구조

 root인 member 는 최적화가 되었는데
 2번째부터는 엔티티로 모두 불러온다

public interface NestedClosedProjections {

    String getUsername();
    TeamInfo getTeam();

    interface TeamInfo{
        String getName();
    }
}


    select
        member0_.username as col_0_0_,
        team1_.team_id as col_1_0_,
        team1_.team_id as team_id1_2_,
        team1_.name as name2_2_
    from
        member member0_
    left outer join
        team team1_
            on member0_.team_id=team1_.team_id
    where
        member0_.username=?


주의
프로젝션 대상이 root 엔티티면, JPQL SELECT 절 최적화 가능
프로젝션 대상이 ROOT가 아니면
LEFT OUTER JOIN 처리
모든 필드를 SELECT해서 엔티티로 조회한 다음에 계산

정리
프로젝션 대상이 root 엔티티면 유용하다.
프로젝션 대상이 root 엔티티를 넘어가면 JPQL SELECT 최적화가 안된다!
실무의 복잡한 쿼리를 해결하기에는 한계가 있다.
실무에서는 단순할 때만 사용하고, 조금만 복잡해지면 QueryDSL을 사용하자

===============

네이티브 쿼리

가급적 네이티브 쿼리는 사용하지 않는게 좋음, 정말 어쩔 수 없을 때 사용
최근에 나온 궁극의 방법 스프링 데이터 Projections 활용

스프링 데이터 JPA 기반 네이티브 쿼리
    페이징 지원
    반환 타입
        Object[]
        Tuple
        DTO(스프링 데이터 인터페이스 Projections 지원)

제약
    Sort 파라미터를 통한 정렬이 정상 동작하지 않을 수 있음(믿지 말고 직접 처리)
    JPQL처럼 애플리케이션 로딩 시점에 문법 확인 불가
    동적 쿼리 불가

문제점
1. dto 로 통계성쿼리로 가져올때 반환타입 지원이 약간 빈약하다 - username 만 가져올때 Member 로 타입지정이 안먹는다

----
JPA 네이티브 SQL 지원
public interface MemberRepository extends JpaRepository<Member, Long> {
 @Query(value = "select * from member where username = ?", nativeQuery = true)
 Member findByNativeQuery(String username);
}

\
***네이티브 SQL을 DTO로 조회할 때는 JdbcTemplate or myBatis 권장***

JPQL은 위치 기반 파리미터를 1부터 시작하지만 네이티브 SQL은 0부터 시작
네이티브 SQL을 엔티티가 아닌 DTO로 변환은 하려면
    DTO 대신 JPA TUPLE 조회
    DTO 대신 MAP 조회
    @SqlResultSetMapping 복잡
    Hibernate ResultTransformer를 사용해야함 복잡
    https://vladmihalcea.com/the-best-way-to-map-a-projection-query-to-a-dto-with-jpaand-hibernate/
    네이티브 SQL을 DTO로 조회할 때는 JdbcTemplate or myBatis 권장


--------

Projections 활용
예) 스프링 데이터 JPA 네이티브 쿼리 + 인터페이스 기반 Projections 활용

    @Query(value = "SELECT m.member_id as id, m.username, t.name as teamName " +
     "FROM member m left join team t ON m.team_id = t.team_id",
     countQuery = "SELECT count(*) from member",
     nativeQuery = true)
    Page<MemberProjection> findByNativeProjection(Pageable pageable);


동적 네이티브 쿼리
하이버네이트를 직접 활용
스프링 JdbcTemplate, myBatis, jooq같은 외부 라이브러리 사용


--> 정리 spring JdbcTemplate 을 사용하자